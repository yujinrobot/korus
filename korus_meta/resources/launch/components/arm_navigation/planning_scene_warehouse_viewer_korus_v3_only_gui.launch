<launch>
	  <node name="planning_scene_warehouse_viewer" pkg="move_arm_warehouse" type="planning_scene_warehouse_viewer">
<!-- 	   <remap from="" to=""/> -->
	  </node>
	  <node pkg="rviz" type="rviz" name='rviz_warehouse_viewer' args="-d $(find korus_meta)/resources/rviz/planning_scene_warehouse_viewer.vcg"/>
	  
	  <!-- Called when left arm executes trajectory using controllers -->
	  <param name="execute_left_trajectory" value="/korus/arm_controller" />
	  <!-- Called when right arm executes trajectory using controllers -->
	  <param name="execute_right_trajectory" value="none" />
	  <!-- Called to get left arm inverse kinematics with collision checking -->
	  <param name="left_ik_name" value="/korus/korus_v3_arm_kinematics/get_constraint_aware_ik" />
	  <!-- Called to get right arm inverse kinematics with collision checking -->
	  <param name="right_ik_name" value="none" />
	  <!-- Called to get left arm inverse kinematics without collision checking -->
	  <param name="non_coll_left_ik_name" value="/korus/korus_v3_arm_kinematics/get_ik" />
	  <!-- Called to get right arm inverse kinematics without collision checking -->
	  <param name="non_coll_right_ik_name" value="none" />
	  <!-- Kinematic chain group name representing the left arm -->
	  <param name="left_arm_group" value="arm" />
	  <!-- Kinematic chain group name representing the right arm -->
	  <param name="right_arm_group" value="none" />
	  <!-- Degree of freedom representing inverse kinematics redundancy on the left arm -->
	  <param name="left_redundancy" value="none" />
	  <!-- Degree of freedom representing inverse kinematics redundancy on the right arm -->
	  <param name="right_redundancy" value="none" />
	  <!-- Link on the left arm to perform inverse kinematics for -->
	  <param name="left_ik_link" value="palm_link" />
	  <!-- Link on the right arm to perform inverse kinematics for -->
	  <param name="right_ik_link" value="none" />
	  <!-- Called to plan trajectories given motion plan requests -->
	  <param name="planner_1_service_name" value="/korus/ompl_planning/plan_kinematic_path" />
    <!-- Called to plan trajectories given motion plan requests -->
    <param name="planner_2_service_name" value="/korus/chomp_planner_longrange" />
	  <!-- Interpolates between end effector positions for the left arm -->
	  <param name="left_interpolate_service_name" value="none" />
	  <!-- Interpolates between end effector positions for the right arm -->
	  <param name="right_interpolate_service_name" value="none" />
	  <!-- Called to smooth and optimize a planner trajectory -->
	  <param name="trajectory_filter_service_name" value="/korus/trajectory_filter_server/filter_trajectory_with_constraints" />
    <!-- Called to smooth and optimize a planner trajectory -->
    <param name="trajectory_filter_2_service_name" value="none" />
	  <!-- Called to get the proximity space -->
	  <param name="proximity_space_service_name" value="none" />
	  <!-- Called to get collision validity of robot state -->
	  <param name="proximity_space_validity_name" value="none"/>
	  <!-- Called to produce a plan that pulls trajectories out of collision -->
	  <param name="proximity_space_planner_name" value="none"/>
	  <!-- Called to send the planning scene to the environment server -->
	  <param name="set_planning_scene_diff_name" value="/korus/environment_server/set_planning_scene_diff"/>
	  <param name="vis_topic_name" value="/korus/planning_scene_visualizer_markers"/>
	  <param name="vis_topic_name" value="/korus/planning_scene_visualizer_markers"/>
</launch>
