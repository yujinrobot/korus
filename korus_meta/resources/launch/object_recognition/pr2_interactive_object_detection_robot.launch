<launch>

  <arg name="stereo" default="true"/>
  <arg name="cvfh" default="false"/>
  <arg name="tod" default="false"/>
  <arg name="high_res" default="false"/>
  <arg name="sim" default="false"/>
  <arg name="flatten_table" default="false"/>
  <arg name="model_set" default="REDUCED_MODEL_SET"/>
  <arg name="kinect_camera_name" default="head_mount_kinect" />

  <!-- database communication node -->
  <rosparam command="load" file="$(find korus_meta)/resources/yaml/object_recognition/yujin_household_objects_database.yaml"/>
  <node pkg="household_objects_database" name="objects_database_node" type="objects_database_node" 
    respawn="true" output="screen">
    <!-- if either tod or cvfh are used, we don't prune grasps that collide with the table in upright -->
    <!-- object orientation, since these detectors find objects in all orientations-->
    <param if="$(arg cvfh)" name="prune_table_clearance" value="-1.0"/>
    <param if="$(arg tod)" name="prune_table_clearance" value="-1.0"/>
    <param name="prune_table_clearance" value="-1.0"/>
  </node>

  <!-- backend node -->
  <node name="pr2_interactive_object_detection_backend" type="pr2_interactive_object_detection_backend" 
    pkg="pr2_interactive_object_detection" output="screen" respawn="false">
    <remap from="tabletop_detection" to="object_recognition_translated"/>
    <param if="$(arg tod)" name="min_marker_quality" value="0.003" />
    <param unless="$(arg tod)" name="min_marker_quality" value="0.003" />
    <param name="robot_reference_frame_id" value="base_link" />
    <param name="table_x" value="1" />
    <param name="table_y" value="0" />
    <param name="table_z" value="0" />
    <param name="table_thickness" value=".01"/>
  </node>

  <!-- Launch TOD (textured object detection) -->
  <group if="$(arg tod)">
    <include file="$(find object_recognition_server)/server.robot.launch"/>
    <node type="recognition_translator" name="recognition_translator" pkg="pr2_interactive_object_detection" output="screen"/>
  </group>

  <!-- Narrow stereo -->
  <group if="$(arg stereo)">
  
    <!-- RGB-D assembly -->
    <include file="$(find rgbd_assembler)/launch/rgbd_assembler.launch"/> 

    <!-- Launch default tabletop detector -->
    <include unless="$(arg cvfh)" file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
      <arg name="tabletop_segmentation_points_input" value="narrow_stereo_textured/points2"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>	
      <arg name="model_set" value="$(arg model_set)"/>
    </include>

    <!-- Launch CVFH -->
    <include if="$(arg cvfh)" file="$(find tabletop_vfh_cluster_detector)/launch/tabletop_complete.launch">
      <arg name="tabletop_segmentation_points_input" value="narrow_stereo_textured/points2"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>	
    </include>
    
  </group>


  <!-- Kinect -->
  <group unless="$(arg stereo)">
  
    <!-- RGB-D assembly -->
    <include file="$(find rgbd_assembler)/launch/rgbd_kinect_assembler.launch">
      <arg name="kinect_camera_name" value="$(arg kinect_camera_name)"/>
      <arg name="high_res" value="$(arg high_res)"/>      
	  <arg name="sim" value="$(arg sim)"/>
    </include>

    
    <!-- Launch default tabletop detector -->
    <include unless="$(arg cvfh)" file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
      <arg name="tabletop_segmentation_points_input" value="$(arg kinect_camera_name)/depth_registered/points"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>	
      <arg name="model_set" value="$(arg model_set)"/> 
    </include>

    <!-- Launch CVFH -->
    <include if="$(arg cvfh)" file="$(find tabletop_vfh_cluster_detector)/launch/tabletop_complete.launch">
      <arg name="tabletop_segmentation_points_input" value="$(arg kinect_camera_name)/depth_registered/points"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>	
    </include>
 
  </group>

</launch>
